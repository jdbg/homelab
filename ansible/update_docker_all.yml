---
- name: Update Services on Multiple Hosts
  hosts: localhost
  tasks:
    - name: Update services on dobby
      command:
        cmd: >
          ansible-playbook -i inventory.ini update_docker.yml
          -e "@services.json"
          -e "target_host=dobby"
          -e "services_var=services_dobby"
      register: dobby_result

    - name: Print result for dobby
      debug:
        var: dobby_result.stdout_lines

    - name: Update services on jellyfin
      command:
        cmd: >
          ansible-playbook -i inventory.ini update_docker.yml
          -e "@services.json"
          -e "target_host=jellyfin"
          -e "services_var=services_jellyfin"
      register: jellyfin_result

    - name: Print result for jellyfin
      debug:
        var: jellyfin_result.stdout_lines

    - name: Update services on dns
      command:
        cmd: >
          ansible-playbook -i inventory.ini update_docker.yml
          -e "@services.json"
          -e "target_host=dns"
          -e "services_var=services_dns"
      register: dns_result

    - name: Print result for dns
      debug:
        var: dns_result.stdout_lines

    - name: Update services on docky
      command:
        cmd: >
          ansible-playbook -i inventory.ini update_docker.yml
          -e "@services.json"
          -e "target_host=docky"
          -e "services_var=services_docky"
      register: docky_result

    - name: Print result for docky
      debug:
        var: docky_result.stdout_lines

    - name: Update services on db
      command:
        cmd: >
          ansible-playbook -i inventory.ini update_docker.yml
          -e "@services.json"
          -e "target_host=db"
          -e "services_var=services_db"
      register: db_result

    - name: Print result for db
      debug:
        var: db_result.stdout_lines

    - name: Update services on pihole
      command:
        cmd: >
          ansible-playbook -i inventory.ini update_docker.yml
          -e "@services.json"
          -e "target_host=pihole"
          -e "services_var=services_pihole"
      register: pihole_result

    - name: Print result for pihole
      debug:
        var: pihole_result.stdout_lines

    - name: Check for any failures
      fail:
        msg: "Failed hosts: {{ failed_hosts | join(', ') }}"
      vars:
        failed_hosts: >-
          {{ 
          (dobby_result.failed | default(false) | ternary(['dobby'], [])) +
          (jellyfin_result.failed | default(false) | ternary(['jellyfin'], [])) +
          (dns_result.failed | default(false) | ternary(['dns'], [])) +
          (docky_result.failed | default(false) | ternary(['docky'], [])) +
          (db_result.failed | default(false) | ternary(['db'], [])) +
          (pihole_result.failed | default(false) | ternary(['pihole'], []))
          }}
      when: failed_hosts | length > 0
